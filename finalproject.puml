@startuml

title Pet Website Application Design - Three Layers Architecture

package presentation {
   +class Main{
     +{static} main(String[])
   }

   ~class MainScreenUI {
    -inventory: InventoryController
    -addPetUI: AddPetUI
    -searchPetUI: SearchPetUI
    -registerAccountUI: RegisterAccountUI
    -loginUI: LoginUI
    -viewPetDetailsUI: ViewPetDetailsUI
    -reviewApplicationsUI: ReviewApplicationsUI
    -chatbotUI: ChatbotUI
    -featurePetUI: FeaturePetUI

    +MainScreenUI(i: InventoryController)
    -showPets(): void
    -showAddPet(): void
    -showSearchPet(): void
    -showRegisterAccount(): void
    -showLogin(): void
    -showPetDetails(): void
    -showReviewApplications(): void
    -showChatbot(): void
    -showFeaturedPet(): void
  }

  ~class AddPetUI {
    -inventory: InventoryController
    -account: Account

    +AddPetUI(i: InventoryController, account: Account)

    -promptPetInfo(): void
    -addPet(): void
    -checkUniqueMicrochipID(): boolean
    -displayDuplicateMicrochipID(): void
    -promptUserForName(): String
    -validateEmptyName(): boolean
    -errorIncompleteName(): void
    -promptUserForSpecies(): String
    -validatePetType(): boolean
    -errorInvalidType(): void
    -promptUserForBreed(): String
    -validatePetBreed(): boolean
    -errorInvalidBreed(): void
    -getShelter(): void
  }

  ~class RemovePetUI {
    -inventory: InventoryController
    -account: Account

    +RemovePetUI(i: InventoryController, account: Account)
    +RemovePetUI()

    -promptForMicrochipID(): void
    -checkExistingMicrochipID(): boolean
    -displayNonexistentMicrochipID(): void
    -promptConfirmDeletion(): void
    -removePet(): void
  }

  ~class SearchPetUI {
    -inventory: InventoryController
    -account: Account

    +SearchPetUI(i: InventoryController, account: Account)

    -promptSearchCriteria(): void
    -buildSearchCriteria(name: String, species: PetType, breed: PetBreed, age: int, location: Location, shelter: String): PetSearchCriteria
    -search(): void

    -displaySearchResults(account: Account): void
    -displayNoSearchResults(): void
  }

  ~class UpdatePetUI {
    -inventory: InventoryController
    -account: Account

    +UpdatePetUI(updatedData: String, i: InventoryController, account: Account)

    -promptForPetData(): void
    -updatePet(updatedData: String): void
  }

  ~class RegisterAccountUI {
    -inventory: InventoryController
    -account: Account

    +RegisterAccountUI(inventory: InventoryController)
    +promptRegistrationForm(): void
    +validateFields(email: String, password: String, name: String, state: String, city: String): boolean
    +displayRegistrationSuccess(): void
    +displayRegistrationError(): void
    +displayEmailAlreadyExistsPrompt(): void
    +promptLoginInstead(): void
  }

  ~class LoginUI {
    -inventory: InventoryController
    -account: Account

    +LoginUI(inventory: InventoryController)
    +promptLoginForm(): void
    +validateCredentials(email: String, password: String): boolean
    +displayLoginSuccess(): void
    +displayLoginError(): void
    +login(): void
    +logout(): void
    +displayLogoutSuccess(): void
    +displayLogoutError(): void
  }

  ~class ViewPetDetailsUI {
     -inventory: InventoryController
     -account: Account
     -removePetUI: RemovePetUI
     -updatePetUI: UpdatePetUI
     -favoritesUI: FavoritesUI
     -adoptionUI: AdoptionApplicationUI

     +ViewPetDetailsUI(i: InventoryController, account: Account, updatePetUI: UpdatePetUI, favoritesUI: FavoritesUI, adoptionUI: AdoptionApplicationUI)

     -displayPetProfile(microchipID: String): void
     -displayRemovePetOption(): void
     -displayUpdatePetOption(): void
     -displayFavoritePetOption(): void
     -displayAdoptionForm(): void
  }

  ~class FavoritesUI {
     -inventory: InventoryController
     -account: Account

     +FavoritesUI(i: InventoryController, account: Account)
     +displaySavedPets(): void
  }

  ~class AdoptionApplicationUI {
    -inventory: InventoryController
    -account: Account

    +AdoptionApplicationUI(i: InventoryController, account: Account)
    +displayApplicationForm(microchipID: String): void
    +submitApplication(microchipID: String, application: AdoptionApplication): void
    +validateApplication(application: AdoptionApplication): boolean
    +displaySuccess(): void
    +displayValidationErrors(): void
  }

  ~class ReviewApplicationsUI {
    -account: Account

    +ReviewApplicationsUI(i: InventoryController, account: Account)
    +displayPendingApplications(shelterEmail: String): void
    +displayApplicationDetails(applicationID: String): void
    +approveApplication(applicationID: String): void
    +rejectApplication(applicationID: String): void
    +requestMoreInfo(applicationID: String): void
    +notifyAdopter(applicationID: String): void
  }

  ~class ChatbotUI {
    +ChatbotUI(): void
    +openChatWindow(): void
    +receiveUserMessage(): void
    +generateResponse(message: String): String
    +displayResponse(response: String): void
    +endConversation(): void
  }

  ~class FeaturePetUI {
    -inventory: InventoryController
    -account: Account

    +FeaturePetUI(i: InventoryController, account: Account)
    +promptFeaturePetSelection(): void
    +displayFeaturePet(): void
  }
}

package domain {
  package pet {
      +class InventoryController {
        -pets: Map<MicrochipID, Pet>
        -favorites: Map<Adopter, List<Pet>>
        -applications: Map<MicrochipID, AdoptionApplication>
        -featuredPets: Map<Shelter, Pet>
        -petRepo: PetRepository
        -applicationRepo: ApplicationRepository
        -accountRepo: AccountRepository

        +InventoryController(Map<MicrochipID, Pet>, Map<Adopter, List<Pet>>, Map<MicrochipID, AdoptionApplication>, Map<Shelter, Pet>, PetRepository, ApplicationRepository, AccountRepository): void

        -loadInventory(): void

        +addPet(microchipID: String, name: String, species: PetType, breed: PetBreed, age: int, location: Location, photo: Image, shelter: Shelter): <<throws>> IllegalArgumentException: void
        +removePet(microChipID: MicrochipID): boolean
        +searchPet(searchCriteria: PetSearchCriteria): Set<Pet>
        +toggleFavorite(adopter: Adopter, microchipID: String): void
        +getFavorites(adopter: Adopter): List<Pet>
        +submitApplication(application: AdoptionApplication): void
        +getApplicationsForShelter(shelterEmail: String): List<AdoptionApplication>
        +setFeaturedPet(shelter: Shelter, petID: MicrochipID): boolean
        +getFeaturedPet(shelter: Shelter): Pet
        +toString(): String
      }

      +class Pet {
        -microchipID: MicroChipID
        -photo: Image
        -info: PetSearchCriteria

        +Pet(microchipID: MicroChipID, photo: Image, searchCriteria: PetSearchCriteria)

        ~checkMatchingPet(searchCriteria: PetSearchCriteria): boolean
        ~checkMatchingID(microchipID: MicroChipID): boolean
        +toString(): String
      }

      +class MicrochipID {
        -microchipID: String

        +MicrochipID(String) <<throws>> IllegalArgumentException
        -checkIDFormat(): boolean
        ~checkMatchingID(microchipID: MicrochipID): boolean
        ~checkExistingID(microchipID: MicrochipID): boolean
        +toString(): String
      }

      +class PetSearchCriteria {
        -name: String
        -species: PetType
        -breed: PetBreed
        -age: int
        -location: Location
        -shelter: Shelter

        +PetSearchCriteria(name: String, species: PetType, breed: PetBreed, age: int, location: Location, shelter: Shelter)

        ~checkMatchingPet(searchCriteria: PetSearchCriteria): boolean
        ~checkCompleteInfo(): boolean
        +toString(): String
      }

      +class Location{
        -state: String
        -city: String

        +Location(state: String, city, String)

        ~checkMatchingLocation(state: String, city: String): boolean
        +toString(): String
      }

      +class AdoptionApplication {
        -applicationID: String
        -applicantEmail: String
        -microchipID: MicroChipID
        -householdInfo: String
        -petExperience: String
        -status: String

        +AdoptionApplication(email: String, id: MicroChipID, householdInfo: String, petExperience: String)
        +validate(): boolean
        +getStatus(): String
        +setStatus(status: String): void
        +toString(): String
      }

      +enum PetType {
        CAT
        DOG
        FROG
        HAMSTER
        LIZARD
        RABBIT
        FISH
      }

      +enum PetBreed {
        PITBULL
        GOLDEN RETRIEVER
        POODLE
        DACHSHUND
        GERMAN SHEPHERD
        HUSKY
        TURKISH ANGORA
        RAGDOLL
        TABBY
        SIAMESE
        PERSIAN
        SPHINX
        AFRICAN DWARF
        PACMAN
        CHINESE
        SYRIAN
        LEOPARD
        BEARDED
        CRESTED
        LIONHEAD
        HOLLAND LOP
        BETTA
        GUPPY
        CLOWNFISH
      }
  }

  package user {
    +interface Account {
      +getEmail(): String
      +validatePassword(password: String): boolean
    }

    +class Adopter implements Account {
      -email: String
      -password: String
      -name: String

      +Adopter(email: String, password: String, name: String)
      +getEmail(): String
      +validatePassword(password: String): boolean
      +toString(): String
    }

    +class Shelter implements Account {
      -email: String
      -password: String
      -name: String
      -location: Location
      -featuredPet: MicrochipID

      +Shelter(email: String, password: String, name: String, location: Location, featuredPet: MicrochipID)
      +getEmail(): String
      +getFeaturedPet(id: MicrochipID): Pet
      +validatePassword(password: String): boolean
      +toString(): String
    }

    +class RegistrationException {
      -message: String
      +RegistrationException(message: String)
      +getMessage(): String
    }

    +class LoginException {
      -message: String
      +LoginException(message: String)
      +getMessage(): String
    }
  }

  package chatbot {
    +class ChatbotService {
      -faqData: Map<String, String>
      -searchEngine: SearchEngine
      -instructionEngine: InstructionEngine

      +ChatbotService(): void
      +generateResponse(userInput: String): String
    }

    +class SearchEngine {
      +generatePetSearchSuggestions(query: String): String
    }

    +class InstructionEngine {
      +generateInstructions(query: String): String
    }
  }
}

package datasource {
  package petdata {
    +class PetRepository {
        +getAllPets(): List<Pet>
        +getPlantByID(id: String): Pet
        +getPetByQueryData(queryData: String): Pet
        +addPetData(pet: PetDTO): void
        +removePetData(id: String): void
    }

    +class PetDTO {
        +microchipID: String
        +name: String
        +species: String
        +breed: String
        +age: int
        +location: String
        +shelterEmail: String
      }
  }

  package userdata {
    +class AccountRepository {
      +getAllAdopters(): List<UserDTO>
      +getAllShelters(): List<UserDTO>
      +getUserByEmail(email: String): UserDTO
      +addUserData(user: UserDTO): void
    }

    +class ApplicationRepository {
      +addApplicationData(application: ApplicationDTO): void
      +getAllApplications(): List<ApplicationDTO>
      +getApplicationsByShelterEmail(email: String): List<ApplicationDTO>
    }

    +class UserDTO {
      +userType: String
      +email: String
      +password: String
      +name: String
      +location: String
      +featuredPet: String
    }

    +class ApplicationDTO {
      -applicationID: String
      -applicantEmail: String
      -microchipID: String
      -householdInfo: String
      -petExperience: String
      -status: String
    }
  }

  package image{
      +interface ImageRetriever{
        +getImage(): byte[]
      }

      +class LocalLibraryImageRetriever{
        +getImage():  byte[]
      }
  }
}

   Main --> MainScreenUI
   MainScreenUI --> AddPetUI
   MainScreenUI --> RemovePetUI
   MainScreenUI --> SearchPetUI
   MainScreenUI --> UpdatePetUI
   MainScreenUI --> RegisterAccountUI
   MainScreenUI --> LoginUI
   MainScreenUI --> ViewPetDetailsUI
   MainScreenUI --> FavoritesUI
   MainScreenUI --> AdoptionApplicationUI
   MainScreenUI --> ReviewApplicationsUI
   MainScreenUI --> ChatbotUI
   MainScreenUI --> FeaturePetUI

   AddPetUI --> InventoryController
   RemovePetUI --> InventoryController
   SearchPetUI --> InventoryController
   UpdatePetUI --> InventoryController
   RegisterAccountUI --> InventoryController
   LoginUI --> InventoryController
   ViewPetDetailsUI --> InventoryController
   FavoritesUI --> InventoryController
   AdoptionApplicationUI --> InventoryController
   ReviewApplicationsUI --> InventoryController
   FeaturePetUI --> InventoryController

   AddPetUI --> Account
   RemovePetUI --> Account
   SearchPetUI --> Account
   UpdatePetUI --> Account
   RegisterAccountUI --> Account
   LoginUI --> Account
   ViewPetDetailsUI --> Account
   FavoritesUI --> Account
   AdoptionApplicationUI --> Account
   ReviewApplicationsUI --> Account
   FeaturePetUI --> Account

   SearchPetUI ..> PetType
   InventoryController ..> PetType
   PetSearchCriteria --> PetType
   SearchPetUI ..> PetBreed
   InventoryController ..> PetBreed
   PetSearchCriteria --> PetBreed

   InventoryController --> PetRepository
   InventoryController --> ApplicationRepository
   InventoryController --> AccountRepository
   InventoryController --> Pet
   InventoryController --> MicrochipID
   InventoryController --> PetSearchCriteria
   InventoryController --> AdoptionApplication
   InventoryController --> Location

   Shelter --> Location
   Adopter ..|> Account
   Shelter ..|> Account
   RegisterAccountUI --> RegistrationException
   LoginUI --> LoginException

   ChatbotService --> SearchEngine
   ChatbotService --> InstructionEngine

   PetRepository --> PetDTO
   AccountRepository --> UserDTO
   ApplicationRepository --> ApplicationDTO

   LocalLibraryImageRetriever ..|> ImageRetriever

@enduml