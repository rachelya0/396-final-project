@startuml

title Pet Website Application Design - Three Layers Architecture

package presentation {
   +class Main{
     +{static} main(String[])
   }

   ~class MainScreenUI {
    -inventory: InventoryController
    -addPetUI: AddPetUI
    -removePetUI: RemovePetUI
    -searchPetUI: SearchPetUI
    -updatePetUI: UpdatePetUI
    -registerAccountUI: RegisterAccountUI
    -loginUI: LoginUI
    -viewPetDetailsUI: ViewPetDetailsUI
    -favoritesUI: FavoritesUI
    -adoptionUI: AdoptionApplicationUI

    +MainScreenUI(i: InventoryController)
    -showPets(): void
    -showAddPet(): void
    -showRemovePet(): void
    -showSearchPet(): void
    -showRegisterAccount(): void
    -showLogin(): void
    -showPetDetails(): void
    -showFavorites(): void
    -showAdoptionForm(): void
  }

  ~class AddPetUI {
    -inventory: InventoryController

    +AddPetUI(i: InventoryController)

    -promptPetInfo(): void
    -addPet(): void
    -checkUniqueMicrochipID(): boolean
    -displayDuplicateMicrochipID(): void
    -promptUserForName(): String
    -validateEmptyName(): boolean
    -errorIncompleteName(): void
    -promptUserForSpecies(): String
    -validatePetType(): boolean
    -errorInvalidType(): void
    -promptUserForBreed(): String
    -validatePetBreed(): boolean
    -errorInvalidBreed(): void
    -getShelter(): void
  }

  ~class RemovePetUI {
    -inventory: InventoryController

    +RemovePetUI(i: InventoryController)
    +RemovePetUI()

    -promptForMicrochipID(): void
    -checkExistingMicrochipID(): boolean
    -displayNonexistentMicrochipID(): void
    -promptConfirmDeletion(): void
    -removePet(): void
  }

  ~class SearchPetUI {
    -inventory: InventoryController
    -account: Account

    +SearchPetUI(i: InventoryController)

    -promptSearchCriteria(): void
    -buildSearchCriteria(name: String, species: PetType, breed: PetBreed, age: int, location: Location, shelter: String): PetSearchCriteria
    -search(): void

    -displaySearchResults(account: Account): void
    -displayNoSearchResults(): void
  }

  ~class UpdatePetUI {
    -inventory: InventoryController

    +UpdatePetUI(updatedData: String, i: InventoryController)

    -promptForPetData(): void

    -updatePet(): void
  }

  ~class RegisterAccountUI {
    -controller: AccountController
    -account: Account

    +RegisterAccountUI(controller: AccountController)
    +promptRegistrationForm(): void
    +validateFields(email: String, password: String, name: String, state: String, city: String): boolean
    +displayRegistrationSuccess(): void
    +displayRegistrationError(): void
    +displayEmailAlreadyExistsPrompt(): void
    +promptLoginInstead(): void
  }

  ~class LoginUI {
    -controller: AccountController
    -account: Account

    +LoginUI(controller: AccountController)
    +promptLoginForm(): void
    +validateCredentials(email: String, password: String): boolean
    +displayLoginSuccess(): void
    +displayLoginError(): void
    +login(): void
    +logout(): void
    +displayLogoutSuccess(): void
    +displayLogoutError(): void
  }

  ~class ViewPetDetailsUI {
     -inventory: InventoryController
     -account: Account

     +ViewPetDetailsUI(i: InventoryController, account: Account)

     -displayPetProfile(microchipID: String): void
     -getPetByID(microchipID: String): Pet
     -displayEditableOptions(pet: Pet): void
     -toggleFavorite(microchipID: String): void
     -promptAdoptionForm(microchipID: String): void
  }

  ~class FavoritesUI {
     -inventory: InventoryController

     +FavoritesUI(i: InventoryController)
     +displaySavedPets(): void
  }

  ~class AdoptionApplicationUI {
    -inventory: InventoryController

    +AdoptionApplicationUI(i: InventoryController)
    +displayApplicationForm(microchipID: String): void
    +submitApplication(microchipID: String, application: AdoptionApplication): void
    +validateApplication(application: AdoptionApplication): boolean
    +displaySuccess(): void
    +displayValidationErrors(): void
  }
}

package domain {
  package pet {
      +class InventoryController {
        -pets: List<Pet>
        -loader: Loader
        -saver: Saver
        -favorites: Map<User, List<MicroChipID>>
        -applications: List<AdoptionApplication>

        +InventoryController(l: Loader, s: Saver): void

        -loadInventory(): void

        +addPet(microchipID: String, name: String, species: PetType, breed: PetBreed, age: int, location: Location, photo: Image, shelter: String): <<throws>> IllegalArgumentException: void
        +removePet(microChipID: MicroChipID): boolean
        +searchPet(searchCriteria: PetSearchCriteria): Set<Pet>
        +getPetByID(microchipID: String): Pet
        +toggleFavorite(user: User, microchipID: String): void
        +getFavorites(user: User): List<Pet>
        +submitApplication(application: AdoptionApplication): void
        +toString(): String
      }

      +class Pet {
        -microchipID: MicroChipID
        -photo: Image
        -info: PetSearchCriteria

        +Pet(microchipID: MicroChipID, photo: Image, searchCriteria: PetSearchCriteria)

        ~checkMatchingPet(searchCriteria: PetSearchCriteria): boolean
        ~checkMatchingID(microchipID: MicroChipID): boolean
        +toString(): String
      }

      +class MicrochipID {
        -microchipID: String

        +MicrochipID(String) <<throws>> IllegalArgumentException
        -checkIDFormat(): boolean
        ~checkMatchingID(microchipID: MicrochipID): boolean
        ~checkExistingID(microchipID: MicrochipID): boolean
        +toString(): String
      }

      +class PetSearchCriteria {
        -name: String
        -species: PetType
        -breed: PetBreed
        -age: int
        -location: Location
        -shelter: String

        +PetSearchCriteria(name: String, species: PetType, breed: PetBreed, age: int, location: Location, shelter: String)

        ~checkMatchingPet(searchCriteria: PetSearchCriteria): boolean
        ~checkCompleteInfo(): boolean
        +toString(): String
      }

      +class Location{
        -state: String
        -city: String

        +Location(state: String, city, String)

        ~checkMatchingLocation(state: String, city: String): boolean
        +toString(): String
      }

      +class AdoptionApplication {
        -applicantEmail: String
        -microchipID: MicroChipID
        -householdInfo: String
        -petExperience: String

        +AdoptionApplication(email: String, id: MicroChipID, householdInfo: String, petExperience: String)
        +validate(): boolean
        +toString(): String
      }

      +enum PetType {
        CAT
        DOG
        FROG
        HAMSTER
        LIZARD
        RABBIT
        FISH
      }

      +enum PetBreed {
        PITBULL
        GOLDEN RETRIEVER
        POODLE
        DACHSHUND
        GERMAN SHEPHERD
        HUSKY
        TURKISH ANGORA
        RAGDOLL
        TABBY
        SIAMESE
        PERSIAN
        SPHINX
        AFRICAN DWARF
        PACMAN
        CHINESE
        SYRIAN
        LEOPARD
        BEARDED
        CRESTED
        LIONHEAD
        HOLLAND LOP
        BETTA
        GUPPY
        CLOWNFISH
      }
  }

  package user {
    +interface Account {
      +getEmail(): String
      +validatePassword(password: String): boolean
    }

    +class User implements Account {
      -email: String
      -password: String
      -name: String

      +User(email: String, password: String, name: String)
      +getEmail(): String
      +validatePassword(password: String): boolean
      +toString(): String
    }

    +class Shelter implements Account {
      -email: String
      -password: String
      -name: String
      -location: String

      +Shelter(email: String, password: String, name: String, location: String)
      +getEmail(): String
      +validatePassword(password: String): boolean
      +toString(): String
    }

    abstract class AccountController {
      +register(email: String, password: String, name: String): void
      +login(email: String, password: String): void
      +logout(): void
    }

    +class ShelterController {
      -shelters: List<Shelter>
      -saver: Saver
      +ShelterController(saver: Saver)

      +registerShelter(email: String, password: String, name: String, location: Location): <<throws>> RegistrationException
      +login(email: String, password: String): void <<throws>> LoginException
      +logout(): void
    }

    +class UserController {
      -users: List<User>
      -saver: Saver
      +UserController(saver: Saver)

      +registerUser(email: String, password: String, name: String): <<throws>> RegistrationException
      +login(email: String, password: String): void <<throws>> LoginException
      +logout(): void
    }

    +class RegistrationException {
      -message: String
      +RegistrationException(message: String)
      +getMessage(): String
    }

    +class LoginException {
      -message: String
      +LoginException(message: String)
      +getMessage(): String
    }
  }
}

package datasource {
  +interface Loader {
    +<i>next(): String
    +<i>hasNext(): boolean
  }

  +interface Saver {
    +<i>append(data: String): void
    +<i>remove(data: String): boolean
  }

  +class LocalTextLoader {
    -fPath: String

    +LocalTextLoader(fPath: String)

    +next(): String
    +hasNext(): boolean
  }

  +class DatabaseLoader {
    -configFilePath: String
    -table: String

    +DatabaseLoader(configFilePath: String, table: String)

    +next(): String
    +hasNext(): boolean
  }

  +class LocalTextSaver {
    -fPath: String

    +LocalTextSaver(fPath: String)

    +append(data: String): void
    +remove(data: String): void
  }

  package image{
      +interface ImageRetriever{
        +getImage(): byte[]
      }

      +class LocalLibraryImageRetriever{
        +getImage():  byte[]
      }
  }
}

Main ..> Saver
Main ..> Loader
Main ..> InventoryController
Main ..> MainScreenUI
Main ..> LocalTextLoader
Main ..> LocalTextSaver

MainScreenUI --> AddPetUI
MainScreenUI --> RemovePetUI
MainScreenUI --> SearchGuitarUI
MainScreenUI --> UpdateGuitarUI
MainScreenUI --> ReportUI
MainScreenUI --> InventoryController
MainScreenUI ..> FileGenerator
MainScreenUI ..> LocalTextLoader

AddPetUI --> InventoryController
AddPetUI ..> PetType

RemovePetUI --> InventoryController

InventoryController --> "*" Guitar
InventoryController --> Loader
InventoryController --> Saver
InventoryController ..> GuitarSearchCriteria
InventoryController ..> SerialNumber
InventoryController ..> Price

RegisterAccountUI --> ShelterController
RegisterAccountUI --> RegistrationException

ShelterController ..> RegistrationException
UserController ..> RegistrationException

AccountController <|-- UserController
AccountController <|-- ShelterController

LocalTextLoader .u.|> Loader
DatabaseLoader .u.|> Loader
LocalTextSaver .u.|> Saver

MainScreenUI --> LoginUI
LoginUI --> ShelterController
LoginUI --> LoginException
ShelterController ..> LoginException

ReportGenerator .u.|> FileGenerator

@enduml